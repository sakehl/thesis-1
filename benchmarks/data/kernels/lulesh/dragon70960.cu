#include <accelerate_cuda.h>
extern "C" __global__ void generate(const Int64 shIn0_2, const Int64 shIn0_1, const Int64 shIn0_0, const double* __restrict__ arrIn0_0, const Int64 shIn1_2, const Int64 shIn1_1, const Int64 shIn1_0, const double* __restrict__ arrIn1_0, const Int64 shIn2_2, const Int64 shIn2_1, const Int64 shIn2_0, const double* __restrict__ arrIn2_2, const double* __restrict__ arrIn2_1, const double* __restrict__ arrIn2_0, const Int64 shIn3_2, const Int64 shIn3_1, const Int64 shIn3_0, const double* __restrict__ arrIn3_2, const double* __restrict__ arrIn3_1, const double* __restrict__ arrIn3_0, const double* __restrict__ arrIn4_0, const Int64 shOut_2, const Int64 shOut_1, const Int64 shOut_0, double* __restrict__ arrOut_3, double* __restrict__ arrOut_2, double* __restrict__ arrOut_1, double* __restrict__ arrOut_0)
{
const int shapeSize = shOut_2 * (shOut_1 * shOut_0);
const int gridSize = blockDim.x * gridDim.x;
int ix;

for (ix = blockDim.x * blockIdx.x + threadIdx.x; ix < shapeSize; ix += gridSize) {
const Int64 tmp_0 = ix;
const Int64 tmp_1 = tmp_0 / shOut_0;
const Int64 tmp_2 = tmp_1 / shOut_1;
const Int64 sh2 = tmp_2 % shOut_2;
const Int64 sh1 = tmp_1 % shOut_1;
const Int64 sh0 = tmp_0 % shOut_0;
const Int64 v0 = (Int64) 1;
const Int64 v1 = (sh2 * shIn2_1 + sh1) * shIn2_0 + sh0;
const Int64 v2 = (sh2 * shIn2_1 + sh1) * shIn2_0 + (v0 + sh0);
const Int64 v3 = (sh2 * shIn2_1 + (v0 + sh1)) * shIn2_0 + (v0 + sh0);
const Int64 v4 = (sh2 * shIn2_1 + (v0 + sh1)) * shIn2_0 + sh0;
const Int64 v5 = ((v0 + sh2) * shIn2_1 + sh1) * shIn2_0 + sh0;
const Int64 v6 = ((v0 + sh2) * shIn2_1 + sh1) * shIn2_0 + (v0 + sh0);
const Int64 v7 = ((v0 + sh2) * shIn2_1 + (v0 + sh1)) * shIn2_0 + (v0 + sh0);
const Int64 v8 = ((v0 + sh2) * shIn2_1 + (v0 + sh1)) * shIn2_0 + sh0;
const double v9 = arrIn2_2[v1];
const double v10 = arrIn2_1[v1];
const double v11 = arrIn2_0[v1];
const double v12 = arrIn2_2[v2];
const double v13 = arrIn2_1[v2];
const double v14 = arrIn2_0[v2];
const double v15 = arrIn2_2[v3];
const double v16 = arrIn2_1[v3];
const double v17 = arrIn2_0[v3];
const double v18 = arrIn2_2[v4];
const double v19 = arrIn2_1[v4];
const double v20 = arrIn2_0[v4];
const double v21 = arrIn2_2[v5];
const double v22 = arrIn2_1[v5];
const double v23 = arrIn2_0[v5];
const double v24 = arrIn2_2[v6];
const double v25 = arrIn2_1[v6];
const double v26 = arrIn2_0[v6];
const double v27 = arrIn2_2[v7];
const double v28 = arrIn2_1[v7];
const double v29 = arrIn2_0[v7];
const double v30 = arrIn2_2[v8];
const double v31 = arrIn2_1[v8];
const double v32 = arrIn2_0[v8];
const double v78 = 8.333333333333333e-2 * (({ const double v33 = v15 - v9; const double v34 = v16 - v10; const double v35 = v17 - v11; const double v36 = v27 - v18; const double v37 = v28 - v19; const double v38 = v29 - v20; const double v39 = v18 - v12; const double v40 = v19 - v13; const double v41 = v20 - v14; const double v42 = v30 - v15; const double v43 = v31 - v16; const double v44 = v32 - v17; const double v45 = v39 + v42; const double v46 = v40 + v43; const double v47 = v41 + v44;  ; v45 * (v37 * v35 - v38 * v34) + v46 * (v38 * v33 - v36 * v35) + v47 * (v36 * v34 - v37 * v33); }) + ({ const double v48 = v30 - v9; const double v49 = v31 - v10; const double v50 = v32 - v11; const double v51 = v27 - v21; const double v52 = v28 - v22; const double v53 = v29 - v23; const double v54 = v21 - v18; const double v55 = v22 - v19; const double v56 = v23 - v20; const double v57 = v24 - v30; const double v58 = v25 - v31; const double v59 = v26 - v32; const double v60 = v54 + v57; const double v61 = v55 + v58; const double v62 = v56 + v59;  ; v60 * (v52 * v50 - v53 * v49) + v61 * (v53 * v48 - v51 * v50) + v62 * (v51 * v49 - v52 * v48); }) + ({ const double v63 = v24 - v9; const double v64 = v25 - v10; const double v65 = v26 - v11; const double v66 = v27 - v12; const double v67 = v28 - v13; const double v68 = v29 - v14; const double v69 = v12 - v21; const double v70 = v13 - v22; const double v71 = v14 - v23; const double v72 = v15 - v24; const double v73 = v16 - v25; const double v74 = v17 - v26; const double v75 = v69 + v72; const double v76 = v70 + v73; const double v77 = v71 + v74;  ; v75 * (v67 * v65 - v68 * v64) + v76 * (v68 * v63 - v66 * v65) + v77 * (v66 * v64 - v67 * v63); }));
const double v80 = v78 / ({ const Int64 v79 = (sh2 * shIn0_1 + sh1) * shIn0_0 + sh0;  ; arrIn0_0[v79]; });
const Int64 v82 = (sh2 * shIn3_1 + sh1) * shIn3_0 + sh0;
const Int64 v83 = (sh2 * shIn3_1 + sh1) * shIn3_0 + (v0 + sh0);
const Int64 v84 = (sh2 * shIn3_1 + (v0 + sh1)) * shIn3_0 + (v0 + sh0);
const Int64 v85 = (sh2 * shIn3_1 + (v0 + sh1)) * shIn3_0 + sh0;
const Int64 v86 = ((v0 + sh2) * shIn3_1 + sh1) * shIn3_0 + sh0;
const Int64 v87 = ((v0 + sh2) * shIn3_1 + sh1) * shIn3_0 + (v0 + sh0);
const Int64 v88 = ((v0 + sh2) * shIn3_1 + (v0 + sh1)) * shIn3_0 + (v0 + sh0);
const Int64 v89 = ((v0 + sh2) * shIn3_1 + (v0 + sh1)) * shIn3_0 + sh0;
const double v90 = arrIn3_2[v82];
const double v91 = arrIn3_1[v82];
const double v92 = arrIn3_0[v82];
const double v93 = arrIn3_2[v83];
const double v94 = arrIn3_1[v83];
const double v95 = arrIn3_0[v83];
const double v96 = arrIn3_2[v84];
const double v97 = arrIn3_1[v84];
const double v98 = arrIn3_0[v84];
const double v99 = arrIn3_2[v85];
const double v100 = arrIn3_1[v85];
const double v101 = arrIn3_0[v85];
const double v102 = arrIn3_2[v86];
const double v103 = arrIn3_1[v86];
const double v104 = arrIn3_0[v86];
const double v105 = arrIn3_2[v87];
const double v106 = arrIn3_1[v87];
const double v107 = arrIn3_0[v87];
const double v108 = arrIn3_2[v88];
const double v109 = arrIn3_1[v88];
const double v110 = arrIn3_0[v88];
const double v111 = arrIn3_2[v89];
const double v112 = arrIn3_1[v89];
const double v113 = arrIn3_0[v89];
const double v115 = 0.5 * ({ const Int64 v114 = 0;  ; arrIn4_0[v114]; });
const double v116 = v115 * v90;
const double v117 = v115 * v91;
const double v118 = v115 * v92;
const double v119 = v115 * v93;
const double v120 = v115 * v94;
const double v121 = v115 * v95;
const double v122 = v115 * v96;
const double v123 = v115 * v97;
const double v124 = v115 * v98;
const double v125 = v115 * v99;
const double v126 = v115 * v100;
const double v127 = v115 * v101;
const double v128 = v115 * v102;
const double v129 = v115 * v103;
const double v130 = v115 * v104;
const double v131 = v115 * v105;
const double v132 = v115 * v106;
const double v133 = v115 * v107;
const double v134 = v115 * v108;
const double v135 = v115 * v109;
const double v136 = v115 * v110;
const double v137 = v115 * v111;
const double v138 = v115 * v112;
const double v139 = v115 * v113;
const double v140 = v9 - v116;
const double v141 = v10 - v117;
const double v142 = v11 - v118;
const double v143 = v12 - v119;
const double v144 = v13 - v120;
const double v145 = v14 - v121;
const double v146 = v15 - v122;
const double v147 = v16 - v123;
const double v148 = v17 - v124;
const double v149 = v18 - v125;
const double v150 = v19 - v126;
const double v151 = v20 - v127;
const double v152 = v21 - v128;
const double v153 = v22 - v129;
const double v154 = v23 - v130;
const double v155 = v24 - v131;
const double v156 = v25 - v132;
const double v157 = v26 - v133;
const double v158 = v27 - v134;
const double v159 = v28 - v135;
const double v160 = v29 - v136;
const double v161 = v30 - v137;
const double v162 = v31 - v138;
const double v163 = v32 - v139;
const double v164 = v152 - v146;
const double v165 = v153 - v147;
const double v166 = v154 - v148;
const double v167 = v155 - v149;
const double v168 = v156 - v150;
const double v169 = v157 - v151;
const double v170 = v158 - v140;
const double v171 = v159 - v141;
const double v172 = v160 - v142;
const double v173 = v161 - v143;
const double v174 = v162 - v144;
const double v175 = v163 - v145;
const double v176 = 0.125 * (v170 + v167 - v173 - v164);
const double v177 = 0.125 * (v170 + v167 + v173 + v164);
const double v178 = 0.125 * (v172 + v169 - v175 - v166);
const double v179 = 0.125 * (v171 + v168 + v174 + v165);
const double v180 = 0.125 * (v171 + v168 - v174 - v165);
const double v181 = 0.125 * (v172 + v169 + v175 + v166);
const double v182 = v179 * v178 - v181 * v180;
const double v183 = v181 * v176 - v177 * v178;
const double v184 = v177 * v180 - v179 * v176;
const double v185 = 0.125 * (v170 + v167 + v173 + v164);
const double v186 = 0.125 * (v170 - v167 + v173 - v164);
const double v187 = 0.125 * (v172 + v169 + v175 + v166);
const double v188 = 0.125 * (v171 - v168 + v174 - v165);
const double v189 = 0.125 * (v171 + v168 + v174 + v165);
const double v190 = 0.125 * (v172 - v169 + v175 - v166);
const double v191 = v188 * v187 - v190 * v189;
const double v192 = v190 * v185 - v186 * v187;
const double v193 = v186 * v189 - v188 * v185;
const double v194 = 0.125 * (v170 - v167 + v173 - v164);
const double v195 = 0.125 * (v170 + v167 - v173 - v164);
const double v196 = 0.125 * (v172 - v169 + v175 - v166);
const double v197 = 0.125 * (v171 + v168 - v174 - v165);
const double v198 = 0.125 * (v171 - v168 + v174 - v165);
const double v199 = 0.125 * (v172 + v169 - v175 - v166);
const double v200 = v197 * v196 - v199 * v198;
const double v201 = v199 * v194 - v195 * v196;
const double v202 = v195 * v198 - v197 * v194;
const double v203 = -v191 - v182 - v200;
const double v204 = -v192 - v183 - v201;
const double v205 = -v193 - v184 - v202;
const double v206 = v191 - v182 - v200;
const double v207 = v192 - v183 - v201;
const double v208 = v193 - v184 - v202;
const double v209 = v191 + v182 - v200;
const double v210 = v192 + v183 - v201;
const double v211 = v193 + v184 - v202;
const double v212 = -v191 + v182 - v200;
const double v213 = -v192 + v183 - v201;
const double v214 = -v193 + v184 - v202;
const double v215 = -(v191 + v182 - v200);
const double v216 = -(v192 + v183 - v201);
const double v217 = -(v193 + v184 - v202);
const double v218 = -(-v191 + v182 - v200);
const double v219 = -(-v192 + v183 - v201);
const double v220 = -(-v193 + v184 - v202);
const double v221 = -(-v191 - v182 - v200);
const double v222 = -(-v192 - v183 - v201);
const double v223 = -(-v193 - v184 - v202);
const double v224 = -(v191 - v182 - v200);
const double v225 = -(v192 - v183 - v201);
const double v226 = -(v193 - v184 - v202);
const double v227 = 8.0 * (0.125 * (v170 - v167 + v173 - v164) * v182 + 0.125 * (v171 - v168 + v174 - v165) * v183 + 0.125 * (v172 - v169 + v175 - v166) * v184);
const double v228 = 1.0 / v227;
const double v229 = v99 - v105;
const double v230 = v100 - v106;
const double v231 = v101 - v107;
const double v232 = v93 - v111;
const double v233 = v94 - v112;
const double v234 = v95 - v113;
const double v235 = v90 - v108;
const double v236 = v91 - v109;
const double v237 = v92 - v110;
const double v238 = v96 - v102;
const double v239 = v97 - v103;
const double v240 = v98 - v104;
const double v241 = v203 * v235 + v206 * v232 + v209 * v238 + v212 * v229;
const double v242 = v203 * v236 + v206 * v233 + v209 * v239 + v212 * v230;
const double v243 = v203 * v237 + v206 * v234 + v209 * v240 + v212 * v231;
const double v244 = v204 * v235 + v207 * v232 + v210 * v238 + v213 * v229;
const double v245 = v204 * v236 + v207 * v233 + v210 * v239 + v213 * v230;
const double v246 = v204 * v237 + v207 * v234 + v210 * v240 + v213 * v231;
const double v247 = v205 * v235 + v208 * v232 + v211 * v238 + v214 * v229;
const double v248 = v205 * v236 + v208 * v233 + v211 * v239 + v214 * v230;
const double v249 = v205 * v237 + v208 * v234 + v211 * v240 + v214 * v231;
const double v250 = v228 * v241;
const double v251 = v228 * v242;
const double v252 = v228 * v243;
const double v253 = v228 * v244;
const double v254 = v228 * v245;
const double v255 = v228 * v246;
const double v256 = v228 * v247;
const double v257 = v228 * v248;
const double v258 = v228 * v249;

arrOut_3[ix] = v80;
arrOut_2[ix] = v80 - ({
const Int64 v81 = (sh2 * shIn1_1 + sh1) * shIn1_0 + sh0;

;
arrIn1_0[v81];
});
arrOut_1[ix] = v250 + v254 + v258;
arrOut_0[ix] = 4.0 * v78 / sqrt(fmax(fmax(fmax(fmax(fmax(({ const double v259 = v15 - v9; const double v260 = v16 - v10; const double v261 = v17 - v11; const double v262 = v18 - v12; const double v263 = v19 - v13; const double v264 = v20 - v14;  ; ((v259 - v262) * (v259 - v262) + (v260 - v263) * (v260 - v263) + (v261 - v264) * (v261 - v264)) * ((v259 + v262) * (v259 + v262) + (v260 + v263) * (v260 + v263) + (v261 + v264) * (v261 + v264)) - ({ const double v265 = (v259 - v262) * (v259 + v262) + (v260 - v263) * (v260 + v263) + (v261 - v264) * (v261 + v264);  ; v265 * v265; }); }), ({ const double v266 = v24 - v9; const double v267 = v25 - v10; const double v268 = v26 - v11; const double v269 = v12 - v21; const double v270 = v13 - v22; const double v271 = v14 - v23;  ; ((v266 - v269) * (v266 - v269) + (v267 - v270) * (v267 - v270) + (v268 - v271) * (v268 - v271)) * ((v266 + v269) * (v266 + v269) + (v267 + v270) * (v267 + v270) + (v268 + v271) * (v268 + v271)) - ({ const double v272 = (v266 - v269) * (v266 + v269) + (v267 - v270) * (v267 + v270) + (v268 - v271) * (v268 + v271);  ; v272 * v272; }); })), ({ const double v273 = v27 - v12; const double v274 = v28 - v13; const double v275 = v29 - v14; const double v276 = v15 - v24; const double v277 = v16 - v25; const double v278 = v17 - v26;  ; ((v273 - v276) * (v273 - v276) + (v274 - v277) * (v274 - v277) + (v275 - v278) * (v275 - v278)) * ((v273 + v276) * (v273 + v276) + (v274 + v277) * (v274 + v277) + (v275 + v278) * (v275 + v278)) - ({ const double v279 = (v273 - v276) * (v273 + v276) + (v274 - v277) * (v274 + v277) + (v275 - v278) * (v275 + v278);  ; v279 * v279; }); })), ({ const double v280 = v30 - v15; const double v281 = v31 - v16; const double v282 = v32 - v17; const double v283 = v18 - v27; const double v284 = v19 - v28; const double v285 = v20 - v29;  ; ((v280 - v283) * (v280 - v283) + (v281 - v284) * (v281 - v284) + (v282 - v285) * (v282 - v285)) * ((v280 + v283) * (v280 + v283) + (v281 + v284) * (v281 + v284) + (v282 + v285) * (v282 + v285)) - ({ const double v286 = (v280 - v283) * (v280 + v283) + (v281 - v284) * (v281 + v284) + (v282 - v285) * (v282 + v285);  ; v286 * v286; }); })), ({ const double v287 = v21 - v18; const double v288 = v22 - v19; const double v289 = v23 - v20; const double v290 = v9 - v30; const double v291 = v10 - v31; const double v292 = v11 - v32;  ; ((v287 - v290) * (v287 - v290) + (v288 - v291) * (v288 - v291) + (v289 - v292) * (v289 - v292)) * ((v287 + v290) * (v287 + v290) + (v288 + v291) * (v288 + v291) + (v289 + v292) * (v289 + v292)) - ({ const double v293 = (v287 - v290) * (v287 + v290) + (v288 - v291) * (v288 + v291) + (v289 - v292) * (v289 + v292);  ; v293 * v293; }); })), ({ const double v294 = v27 - v21; const double v295 = v28 - v22; const double v296 = v29 - v23; const double v297 = v24 - v30; const double v298 = v25 - v31; const double v299 = v26 - v32;  ; ((v294 - v297) * (v294 - v297) + (v295 - v298) * (v295 - v298) + (v296 - v299) * (v296 - v299)) * ((v294 + v297) * (v294 + v297) + (v295 + v298) * (v295 + v298) + (v296 + v299) * (v296 + v299)) - ({ const double v300 = (v294 - v297) * (v294 + v297) + (v295 - v298) * (v295 + v298) + (v296 - v299) * (v296 + v299);  ; v300 * v300; }); })));
}
}
